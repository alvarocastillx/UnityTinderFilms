//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Config/onInputReload.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OnInputReload: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OnInputReload()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""onInputReload"",
    ""maps"": [
        {
            ""name"": ""inputReload"",
            ""id"": ""21e7da6c-aaae-4962-94a5-e3453dd10bea"",
            ""actions"": [
                {
                    ""name"": ""onInputReload"",
                    ""type"": ""Button"",
                    ""id"": ""05243268-85ee-48fc-91dd-9686273fb22f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee23946c-6df1-496a-8e4f-f19b701a47a5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""onInputReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // inputReload
        m_inputReload = asset.FindActionMap("inputReload", throwIfNotFound: true);
        m_inputReload_onInputReload = m_inputReload.FindAction("onInputReload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // inputReload
    private readonly InputActionMap m_inputReload;
    private List<IInputReloadActions> m_InputReloadActionsCallbackInterfaces = new List<IInputReloadActions>();
    private readonly InputAction m_inputReload_onInputReload;
    public struct InputReloadActions
    {
        private @OnInputReload m_Wrapper;
        public InputReloadActions(@OnInputReload wrapper) { m_Wrapper = wrapper; }
        public InputAction @onInputReload => m_Wrapper.m_inputReload_onInputReload;
        public InputActionMap Get() { return m_Wrapper.m_inputReload; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputReloadActions set) { return set.Get(); }
        public void AddCallbacks(IInputReloadActions instance)
        {
            if (instance == null || m_Wrapper.m_InputReloadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputReloadActionsCallbackInterfaces.Add(instance);
            @onInputReload.started += instance.OnOnInputReload;
            @onInputReload.performed += instance.OnOnInputReload;
            @onInputReload.canceled += instance.OnOnInputReload;
        }

        private void UnregisterCallbacks(IInputReloadActions instance)
        {
            @onInputReload.started -= instance.OnOnInputReload;
            @onInputReload.performed -= instance.OnOnInputReload;
            @onInputReload.canceled -= instance.OnOnInputReload;
        }

        public void RemoveCallbacks(IInputReloadActions instance)
        {
            if (m_Wrapper.m_InputReloadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputReloadActions instance)
        {
            foreach (var item in m_Wrapper.m_InputReloadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputReloadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputReloadActions @inputReload => new InputReloadActions(this);
    public interface IInputReloadActions
    {
        void OnOnInputReload(InputAction.CallbackContext context);
    }
}
